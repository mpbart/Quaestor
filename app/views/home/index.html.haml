= stylesheet_link_tag "application", media: "all"

= turbo_frame_tag 'home' do
  %body
    %div.ui.padded.grid
      = render "shared/dimmer"
      %div.one.wide.column
      %div.three.wide.column
        = render partial: "shared/account_refresh_error"
        %div.ui.fluid.card
          %div.content
            %h3.ui.center.aligned.header
              Selected Time Period
            %div.ui.divider
            = form_with url: '/', method: :get, class: 'ui form' do |form|
              %div.two.fields
                %div.field
                  = form.label :start_date
                  = form.date_field :start_date, value: Date.current - 30.days
                %div.field
                  = form.label :end_date
                  = form.date_field :end_date, value: Date.current
              %div.field
                = form.submit "Submit", class: 'ui fluid primary button'
        %div.ui.fluid.card
          %div.content
            %h3.ui.center.aligned.header
              Accounts Overview
            %div.ui.divider
            %div#accounts
              - @accounts.group_by{ |a| a.account_type}.each do |type, accounts|
                %div.ui.fluid.accordion
                  %div.title.split-title
                    %span
                      %i.dropdown.icon
                      %strong
                        = type + " (#{accounts.count})"
                    %span
                      - balance_klass = Account::DEBT_ACCOUNT_TYPES.include?(type) ? 'black-text' : 'green-text'
                      %strong{ class: balance_klass }
                        = number_to_currency(Account.current_balance(current_user.id, accounts.pluck(:id)).round(2))
                  %div.content
                    %div.ui.list.padded
                      - accounts.each do |account|
                        %div.item.clickable-list-item{ data: { url: account_path(account) } }
                          %div.content
                            %div.left.floated.vertical-aligned
                              = inline_svg('angle_icon.svg')
                              = inline_svg('dash-icon.svg')
                              = account.name
                            %div.right.floated.vertical-aligned
                              %b{ style: "color: #767676" }
                                = number_to_currency(account.balances.last&.amount.round(2))
              %div.ui.divider
              %div.ui.grid
                %div.ui.three.column.row
                  %div.left.floated.column
                    %h4
                      Estimated Net Worth
                  %div.right.aligned.right.floated.column
                    %h4
                      = number_to_currency(@net_worth)
        %div.ui.fluid.card
          %div.content
            %h3.ui.center.aligned.header
              Monthly Summary
            %div.center.aligned.meta
              = "#{@start_date.to_date.strftime('%b %d')} - #{@end_date.to_date.strftime('%b %d')}"
            %div.ui.divider
            %h4.ui.center.aligned.header
              Income
            %div.ui.fluid.accordion
              %div.title.split-title
                %span
                  %i.dropdown.icon
                  %strong
                    Total Income
                %span
                  %strong.green-text
                    = number_to_currency(@total_income)
              %div.content
                %div.ui.list.padded
                  = render partial: "dropdown_list_item",
                    locals: { label: "Recurring",
                              value: number_to_currency(@calcs.total_amount(@calcs.recurring(@calcs.income_by_source(@start_date, @end_date)))),
                              value_klass: "green-text"}
                  = render partial: "dropdown_list_item",
                    locals: { label: "Non-Recurring",
                              value: number_to_currency(@calcs.total_amount(@calcs.non_recurring(@calcs.income_by_source(@start_date, @end_date)))),
                              value_klass: "green-text"}
            %div.ui.divider
            %h4.ui.center.aligned.header
              Expenses
            %div.ui.fluid.accordion
              %div.title.split-title
                %span
                  %i.dropdown.icon
                  %strong>
                    Total Expenses
                %span
                  %strong
                    = number_to_currency(@total_expenses)
              %div.content
                %div.ui.list.padded
                  = render partial: "dropdown_list_item",
                    locals: { label: "Recurring",
                              value: number_to_currency(@calcs.total_amount(@calcs.recurring(@calcs.expenses_by_source(@start_date, @end_date))))}
                  = render partial: "dropdown_list_item",
                    locals: { label: "Non-Recurring",
                              value: number_to_currency(@calcs.total_amount(@calcs.non_recurring(@calcs.expenses_by_source(@start_date, @end_date))))}
            %div.ui.divider
            %div.ui.list.padded
              %div.item
                %div.content
                  %div.left.floated.vertical-aligned
                    %strong
                      Net Income
                  %div.right.floated.vertical-aligned
                    - net_income = @total_income - @total_expenses
                    - klass = net_income > 0 ? 'green-text' : 'red-text'
                    %strong{ class: klass }
                      = number_to_currency(net_income)
            %div.ui.divider
            %div.ui.list.padded
              %div.item
                %div.content
                  %div.left.floated.vertical-aligned
                    %strong
                      Savings Rate
                  %div.right.floated.vertical-aligned
                    %strong.green-text
                      - if @total_income == 0
                        = "0%"
                      - else
                        = "#{((net_income / @total_income) * 100.0).round(2)}%"
      %div.eight.wide.column
        %div.ui.fluid.card
          %div.content
            %h3.ui.center.aligned.header
              Spending Breakdown
            %div.ui.divider
            %div.title.split-title
              %span
                %strong
                  INCOME
              %span
                %strong.green-text
                  = number_to_currency(@total_income)
            %div#income-progress.ui.progress.full{ data: { percent: "100", content: 'abc', position: 'top center'} }
              %div.bar{ style: "background-color: #179d89 !important" }
            %div.title.split-title
              %span
                %strong
                  EXPENSES
              %span
                %strong
                  = number_to_currency(@total_expenses)

            - amounts = @calcs.expenses_by_source(@start_date, @end_date).map{ |k, v| [k, v.sum(&:first)] }.to_h
            - percentages = amounts.map{ |k, v| [k, ((v / @total_income) * 100).to_i] }.to_h
            %div#expense-progress.ui.multiple.progress{ data: { percent: percentages.values.map(&:to_i).sort.reverse.join(",") } }
              - percentages.sort_by{ |k, v| v }.reverse.each_with_index do |(name, percent), idx|
                - color = progress_bar_colors[idx % progress_bar_colors.length + 1]
                %div.bar{ style: "background-color: #{color} !important", data: { content: name, position: "top center" } }
            %div.ui.grid
              %div.ui.row
                %div.ui.four.wide.column
                  %strong{ style: "color: #767676" }
                    EXPENSES
                %div.ui.eight.wide.column
                %div.ui.four.wide.column
                  %div.ui.grid
                    %div.two.column.row.consistent
                      %div.cozy.column
                        %strong
                          Total Spent
                      %div.cozy.column
                        %strong
                          ="% of Total"
            - @calcs.expenses_by_source(@start_date, @end_date).sort_by{ |k, v| v.sum(&:first) }.reverse.each_with_index do |(name, transactions), idx|
              - color = progress_bar_colors[idx % progress_bar_colors.length + 1]
              %div.ui.divider
              %div.ui.fluid.accordion
                %div.ui.grid.title
                  %div.ui.row
                    %div.ui.four.wide.column
                      %i.dropdown.icon
                      %strong
                        = name.humanize
                    %div.ui.eight.wide.column
                      %div.ui.middle.aligned.small.progress{ data: { percent: ((transactions.sum(&:first) / @total_expenses).round(2) * 100.0).to_s } }
                        %div.bar{ style: "background-color: #{color}" }
                    %div.ui.four.wide.column
                      %div.ui.grid
                        %div.two.column.row.consistent
                          %div.cozy.column
                            %strong
                              = BigDecimal(transactions.sum(&:first), 8).to_digits
                          %div.cozy.column
                            %strong
                              = "#{(BigDecimal(transactions.sum(&:first), 8) / BigDecimal(@total_expenses, 8)).round(2) * 100.0} %"
                %div.content
                  - transactions.group_by{ |t| t.third }.sort_by{ |k, v| v.sum(&:first) }.reverse.each do |sub_name, sub_transactions|
                    %div.ui.divider
                    %div.ui.grid
                      %div.ui.row
                        %div.ui.four.wide.column
                          %div.vertical-aligned
                            = inline_svg('angle_icon.svg')
                            = inline_svg('dash-icon.svg')
                            %strong
                              = sub_name[sub_transactions[0][1].length + 1..].humanize
                        %div.ui.eight.wide.column
                          %div.ui.middle.aligned.small.progress{ data: { percent: ((sub_transactions.sum(&:first) / @total_expenses).round(2) * 100.0).to_s } }
                            %div.bar{ style: "background-color: #{color}" }
                        %div.ui.four.wide.column
                          %div.ui.grid
                            %div.two.column.row.consistent
                              %div.cozy.column
                                %strong
                                  = BigDecimal(sub_transactions.sum(&:first), 8).to_digits
                              %div.cozy.column
                                %strong
                                  = "#{(BigDecimal(sub_transactions.sum(&:first), 8) / BigDecimal(@total_expenses, 8)).round(2) * 100.0} %"
              
      %div.four.wide.column
        %div.ui.grid
          %div.ui.row
            %div.left.floated.column
              %div#add-account-button.ui.accordion.button
                %div.active.title
                  %strong
                    Add New Account
                %div.content
                  %div#create-account-form.ui.form
                    = form_for :account, url: accounts_path do |form|
                      %div.field
                        = form.label :name
                        = form.text_field :name
                      %div.field
                        = form.label :institution_name
                        = form.text_field :institution_name
                      %div.field
                        = form.label :account_number_last_4
                        = form.text_field :mask
                      %div.field
                        = form.label :account_type
                        = form.select :type, Account::ACCOUNT_TYPES.keys, {include_blank: true}, {class: 'ui dropdown'}
                      %div.field
                        = form.label :account_sub_type
                        = form.select :sub_type, [], {}, {class: 'ui dropdown'}
                      %div.field
                        = form.label :current_balance
                        = form.text_field :balance
                      %span
                        %button.ui.button{ type: "submit" }
                          Save Account
                        %i#successIconAccount.green.check.icon
                        %i#failureIconAccount.red.times.icon
          %div.ui.row
            %div.left.floated.column
              %div#add-balance-button.ui.accordion.button
                %div.active.title
                  %strong
                    Record Balance
                %div.content
                  %div#create-balance-form.ui.form
                    = form_for :balance, url: balances_path do |form|
                      = hidden_field_tag :authenticity_token, form_authenticity_token
                      %div.field
                        = form.label :account
                        = form.select :account_id, Account.all.map{ |a| [a.name, a.id] }, {include_blank: true}, {class: 'ui dropdown'}
                      %div.field
                        = form.label :current_balance
                        = form.text_field :balance
                      %div.field
                        = form.label :date
                        = form.date_field :date, value: Date.current
                      %span>
                        %button.ui.button{ type: "submit" }
                          Save Balance
                        %i#successIconBalance.green.check.icon
                        %i#failureIconBalance.red.times.icon
          %div.ui.row
            %div.left.floated.column
              %div#add-label-button.ui.accordion.button
                %div.active.title
                  %strong
                    Create Label
                %div.content
                  %div#create-label-form.ui.form
                    = form_for :label, url: labels_path do |form|
                      = hidden_field_tag :authenticity_token, form_authenticity_token
                      %div.field
                        = form.label :label_name
                        = form.text_field :name
                      %span>
                        %button.ui.button{ type: "submit" }
                          Save Label
                        %i#successIconLabel.green.check.icon
                        %i#failureIconLabel.red.times.icon

= javascript_include_tag "plaid"
= javascript_include_tag "accounts"
